{"version":3,"sources":["containers/MyApp.tsx","index.tsx"],"names":["MyApp","props","_useServiceRunner","useServiceRunner","serviceRunner","Object","slicedToArray","_useService","useService","EthereumJSONRPC","erpc","_useBlockNumber","_useState","useState","_useState2","blockNumber","setBlockNumber","useEffect","eth_blockNumber","then","useBlockNumber","react_default","a","createElement","style","textAlign","alt","src","width","margin","paddingBottom","color","parseInt","ReactDOM","render","containers_MyApp","greeting","document","getElementById"],"mappings":"mOA0CeA,EA3BD,SAACC,GAAe,IAAAC,EACJC,6BAAjBC,EADqBC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAAAK,EAEbC,qBAA4BJ,EAAe,aAAcK,IAAiB,QAAS,WAA3FC,EAFqBL,OAAAC,EAAA,EAAAD,CAAAE,EAAA,MAAAI,EAXP,SAACD,GAAgD,IAAAE,EAC/BC,qBAD+BC,EAAAT,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAC/DG,EAD+DD,EAAA,GAClDE,EADkDF,EAAA,GAQtE,OALAG,oBAAU,WACHP,GACLA,EAAKQ,kBAAkBC,KAAKH,IAC3B,CAACN,IAEG,CAACK,GAMcK,CAAeV,GAA9BK,EAHqBV,OAAAC,EAAA,EAAAD,CAAAM,EAAA,MAK5B,OAAKD,GAASK,EAKZM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,UAAW,WACtBJ,EAAAC,EAAAC,cAAA,OAAKG,IAAI,YAAYC,IAAI,+HAE3BN,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,UAAW,SAAUG,MAAO,QAASC,OAAQ,SAAUC,cAAe,MAAOC,MAAO,SAC/FV,EAAAC,EAAAC,cAAA,+DAIFF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,UAAW,WACtBJ,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,YAAOS,SAASjB,EAAa,OAf1BM,EAAAC,EAAAC,cAAA,2BCjBXU,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,CAAOC,SAAS,QAAUC,SAASC,eAAe","file":"static/js/main.11b81ff6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useServiceRunner, useService } from \"@etclabscore/jade-service-runner-react-hooks\";\nimport EthereumJSONRPC from \"@etclabscore/ethereum-json-rpc\";\n\nconst useBlockNumber = (erpc: EthereumJSONRPC | undefined): [string] => {\n  const [blockNumber, setBlockNumber]  = useState();\n\n  useEffect(() => {\n    if (!erpc) { return; }\n    erpc.eth_blockNumber().then(setBlockNumber);\n  }, [erpc]);\n\n  return [blockNumber];\n};\n\nconst MyApp = (props: any) => {\n  const [serviceRunner] = useServiceRunner();\n  const [erpc] = useService<EthereumJSONRPC>(serviceRunner, \"multi-geth\", EthereumJSONRPC, \"1.9.0\", \"mainnet\");\n  const [blockNumber] = useBlockNumber(erpc);\n\n  if (!erpc || !blockNumber) {\n    return <div>Loading ...</div>;\n  }\n\n  return (\n    <div>\n      <div style={{textAlign: \"center\"}}>\n        <img alt=\"jade-logo\" src=\"https://github.com/etclabscore/jade-media-assets/blob/master/jade-logo-light/jade-logo-light%20(PNG)/256x256.png?raw=true\" />\n      </div>\n      <div style={{textAlign: \"center\", width: \"300px\", margin: \"0 auto\", paddingBottom: \"5vh\", color: \"gray\"}}>\n        <span>\n          Truly peer-to-peer decentralized applications.\n        </span>\n      </div>\n      <div style={{textAlign: \"center\"}}>\n        <b>BlockNumber: </b>\n        <span>{parseInt(blockNumber, 16)}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default MyApp;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport MyApp from \"./containers/MyApp\";\n\nReactDOM.render(<MyApp greeting=\"foo\" />, document.getElementById(\"root\"));\n"],"sourceRoot":""}